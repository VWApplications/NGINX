# Usuário para cada CPU
user nginx;

# Quantidade de CPUs usadas ($ nproc).
worker_processes 2;

events {
    # Número de conecções que cada cpu pode fazer ($ ulimit -n)
    # máximo de conexões = worker_processes x worker_connections
    worker_connections 2048;
}

http {

    # Configura algumas variáveis de cabeçalho, por exemplo, para reconhecer arquivos
    # css, html, png e etc... definidos no arquivo passado (mime.types).
    include mime.types;

    # Tamanho do buffer para submissões de formulários do tipo POST, ou seja envio de dados
    # 10 (bytes), 10k (kilobytes), 10m (Megabytes)
    client_body_buffer_size 10k;

    # Tamanho máximo dos dados para requisição do tipo POST, se ultrapassar esse valor
    # o servidor vai response com 413 (REQUEST ENTITY TOO LARGE)
    client_max_body_size 8m;

    # Tamanho do buffer para o header, ou seja, a quantidade de memória alocada para ler dados do header.
    client_header_buffer_size 1k;

    # Tempo máximo entre operações de leitura consecultiva para receber o header e o body do cliente
    # 10 (milisegundos) 10s (segundos) 10m (minutos) 10h (horas) 10d (dias)
    client_body_timeout 30;
    client_header_timeout 30;

    # Esta diretiva define a quantidade de tempo que o NGINX deve manter
    # aberta uma conexão com um cliente, caso haja mais dados a caminho.
    keepalive_timeout 30;

    # Tempo máximo para o cliente receber a resposta, ou seja, se o cliente
    # não receber a resposta no tempo estipulado, a conexão é fechada.
    send_timeout 10;

    # Pular o buffer em arquivos estáticos, ou seja, le os dados direto do disco e envia para o cliente.
    sendfile on;

    server {
        # Escutar a porta 80
        listen 80;

        # Quais tipos de domínio pode ser considerado
        # Se não for o IP ou o localhost tem que configurar o arquivo hosts do linux
        server_name localhost;
        server_name 192.168.1.139;
        server_name *.vwapplication.com;

        # Onde está localizado os arquivos ou diretorios do site.
        # Ex. location /i/ root /data/w3; -> /data/w3/i/
        root /;

        # Primeiro tentar encontrar a location passada na url
        # Se nenhuma der certo gera o html do 404 NOT FOUND.
        try_files $uri /not_found;

        location / {
            return 200 "OK";
        }

        location /vwiki_api {
            # Expressão regular que transforma /vwiki_api/... em /...
            rewrite ^/vwiki_api(.*) $1 break;
            proxy_pass http://192.168.1.139:8000;
        }

        location /vwiki {
            rewrite ^/vwiki(.*) /$1 break;
            proxy_pass http://192.168.1.139:3000;
        }

        location /static/ {
            alias /usr/share/nginx/html/;
        }

        location = /not_found {
            return 404 "Não encontrado!";
        }

        # Printa qualquer requisição ao servidor
        access_log /var/log/nginx/access.log;
        # Printa qualquer erro no servidor
        error_log /var/log/nginx/error.log;
    }
}